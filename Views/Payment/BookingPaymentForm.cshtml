@model FitHub.Models.PaymentMethod

<div class="details-content body-header d-flex justify-content-between">
    <h2>Make a Payment</h2>
    <div class="navbuttons">
        <a class="btn btn-danger" asp-controller="Bookings" asp-action="Create">Cancel</a>
    </div>
</div>

<hr />

<div class="body-content payment-form">
    <div class="body-content row">
        <div class="col-md-6">
            @using (Html.BeginForm("ProcessBookingPayment", "Payment", FormMethod.Post))
            {
                @Html.HiddenFor(model => model.Booking.BookingID)
                @Html.HiddenFor(model => model.Booking.AmountPaid)
                @Html.HiddenFor(model => model.Booking.UserID)
                @Html.HiddenFor(model => model.Booking.AmenityID)
                @Html.HiddenFor(model => model.Booking.BookingDate)
                @Html.HiddenFor(model => model.Booking.NumberOfPeople)
                @Html.HiddenFor(model => model.Booking.PurchasedDate)
                @Html.HiddenFor(model => model.Booking.User)
                @Html.HiddenFor(model => model.Booking.Amenity)

                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    @Html.LabelFor(model => model.CardType, new { @class = "control-label col-md-12" })
                    <div class="col-md-12">
                        @Html.DropDownListFor(model => model.CardType, new SelectList(new[]
                                 {
                    new SelectListItem { Value = "Visa", Text = "Visa" },
                    new SelectListItem { Value = "MasterCard", Text = "MasterCard" },
                    new SelectListItem { Value = "AmericanExpress", Text = "American Express" },
                    }, "Value", "Text"), "Select Card Type", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CardType, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label asp-for="NameOnCard" class="control-label"></label>
                    <input asp-for="NameOnCard" class="form-control" placeholder="Exactly like on the card" />
                    <span asp-validation-for="NameOnCard" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="CardNumber" class="control-label"></label>
                    <input asp-for="CardNumber" class="form-control" placeholder="15-16 Digits Only" />
                    <span asp-validation-for="CardNumber" class="text-danger"></span>
                    <span id="cardTypeErrorSpan" class="text-danger"></span>
                </div>
                <div class="row align-content-between">
                    <div class="form-group col-md-6">
                        <label asp-for="ExpiryDate" class="control-label"></label>
                        <input asp-for="ExpiryDate" class="form-control" placeholder="MM/YYYY" />
                        <span asp-validation-for="ExpiryDate" class="text-danger"></span>
                        <span id="expiryDateErrorSpan" class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-6">
                        <label asp-for="CVV" class="control-label"></label>
                        <input asp-for="CVV" class="form-control" placeholder="3-4 Digits Only" />
                        <span asp-validation-for="CVV" class="text-danger"></span>
                    </div>
                </div>
                <br />
                <div class="form-group row">
                    <div class="col-md-6"> </div>
                    <button type="submit" class="btn btn-primary col-md-6">Process Payment</button>
                </div>
            }
        </div>

        @* <div>
    <strong>Amenity Booked</strong> @Model.Booking.Amenity.AmenityName
    <strong>Booking Date</strong> @Model.Booking.BookingDate
    <strong>Total Amount:</strong> @Model.Booking.AmountPaid 
</div> *@
        <div class="col-md-6">
        <h3>Transaction Details</h3>
        <ul class="list-group list-group-flush">
            <li class="list-group-item d-flex align-items-center flex-wrap">
                <h6 class="mb-0 col-sm-4">
                    Amenity Booked:
                </h6 class = "col-sm-6">
                <span class="text-secondary">@Model.Booking.Amenity.AmenityName</span>
            </li>
            <li class="list-group-item d-flex align-items-center flex-wrap">
                <h6 class="mb-0 col-sm-4">
                    Booking Date
                </h6>
                <span class="text-secondary">@Model.Booking.BookingDate.ToString("MM/dd/yyyy")</span>
            </li>
            <li class="list-group-item d-flex align-items-center flex-wrap">
                <h6 class="mb-0 col-sm-4">
                    Total Amount:
                </h6>
                <span class="text-secondary">$@Model.Booking.AmountPaid</span>
            </li>
        </ul>
        <br />
        <h6>Instructions:</h6>
        <p>Please Enter the Name exactly as it appears on your card. <br/>
            Also, please do not put any spaces or '-' on your card number.    
        </p>
    </div>
    </div>

</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

}

@* full content inside the <script> tag - subhi*@
    <script>
        
        function validateExpiryDate(expiry) {
            var expiryMonth = parseInt(expiry.substring(0, 2));
            var expiryYear = parseInt(expiry.substring(3, 7));

            if (expiryMonth < 1 || expiryMonth > 12) {
                return "Month can only be between 01 to 12";
            }

            if (expiryYear < 2016 || expiryYear > 2031) {
                return "Year can only be between 2016 and 2031";
            }

            var currentDate = new Date();
            var currentYear = currentDate.getFullYear() % 100;
            var currentMonth = currentDate.getMonth() + 1;

            if (expiryYear < currentYear || (expiryYear === currentYear && expiryMonth < currentMonth)) {
                return "Card is Expired";
            }

            return null; 
        }

      
        function validateCardByType(cardNumber, cardType) {
            var cardTypeRegexMap = {
                "visa": /^4[0-9]{15}$/,
                "mastercard": /^5[1-5][0-9]{14}$/,
                "americanexpress": /^3[47][0-9]{13}$/
            };

            var regex = cardTypeRegexMap[cardType.toLowerCase().replace(" ", "")];
            if (!regex) {
                return "Invalid Card Type";
            }

            if (!regex.test(cardNumber)) {
                return "Invalid Card Number for the selected card type";
            }

            return null; 
        }

     
        $('form').submit(function () {
            var cardType = $('#CardType').val();
            var nameOnCard = $('#NameOnCard').val();
            var cardNumber = $('#CardNumber').val();
            var expiryDate = $('#ExpiryDate').val();
            var cvv = $('#CVV').val();

            var expiryValidationResult = validateExpiryDate(expiryDate);
            var cardTypeValidationResult = validateCardByType(cardNumber, cardType);

            if (expiryValidationResult !== null) {
                $('#expiryDateErrorSpan').text(expiryValidationResult);
                return false; 
            }

            if (cardTypeValidationResult !== null) {
                $('#cardTypeErrorSpan').text(cardTypeValidationResult); 
                return false; 
            }

            return true; 
        });
    </script>
